import argparse
import logging
import random
import time
from collections import defaultdict
from datetime import datetime, timedelta, timezone
from typing import TextIO, Tuple, List

from ..ai.blackbox import BlackboxChat, BlackboxError
from ..api import ApiError, BadRequest
from ..main import BaseOperation
from ..main import Namespace as BaseNamespace
from ..main import get_api
from ..mixins import GetResumeIdMixin
from ..telemetry_client import TelemetryClient, TelemetryError
from ..types import ApiListResponse, VacancyItem
from ..utils import (fix_datetime, parse_interval, parse_invalid_datetime,
                     random_text, truncate_string)
from hh_applicant_tool.ai import blackbox

logger = logging.getLogger(__package__)

STOP_WORDS = [
    "lead", "Teamlead", "—Å—Ç–∞–∂—ë—Ä", "—Å—Ç–∞–∂–µ—Ä", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä", 
    "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", "–ø—Ä–æ–¥–∞–∂–∏", "–ø—Ä–æ–¥–∞–∂–∞–º", "—Ç–æ—Ä–≥–æ–≤—ã—Ö", 
    "PHP", "Angular", "flutter", "kotlin", "Python", "javascript", "Java", "rust", "oracle", 
    "c++","–°++""Laravel", "lua", "stm", "qa", "elixir", "1c", "Node.js", "NodeJS", "golang", 
    "–ö–ª–∏–∫—Ö–∞—É—Å", "clickhouse", "aso", "ruby", "postgresql", "mssql", 
    "–ê—Ä—Ç–∏—Å—Ç", "Artist", "–∞–Ω–∞–ª–∏—Ç–∏–∫", "Analyst", "HTMX", "Helix", 
    "Cyber", "SQL", "Delphi", "Vue", "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä", "–†–ù–†", "ColdFusion","Odoo", "Frontend", " –° ", "Manager", "–º–µ–Ω–µ–¥–∂–µ—Ä", "Power Platform", "Unreal", "Roblox", "Intern", "–∏–Ω—Ç–µ—Ä–Ω", "elma"
]


class Namespace(BaseNamespace):
    resume_id: str | None
    message_list: TextIO
    force_message: bool
    use_ai: bool
    pre_prompt: str
    apply_interval: tuple[float, float]
    page_interval: tuple[float, float]
    order_by: str
    search: str
    dry_run: bool


class Operation(BaseOperation, GetResumeIdMixin):
    """–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏."""

    def setup_parser(self, parser: argparse.ArgumentParser) -> None:
        parser.add_argument("--resume-id", help="–ò–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—é–º–µ")
        parser.add_argument(
            "-L",
            "--message-list",
            help="–ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏. –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.",
            type=argparse.FileType('r', encoding='utf-8', errors='replace'),
        )
        parser.add_argument(
            "-f",
            "--force-message",
            "--force",
            help="–í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ",
            default=False,
            action=argparse.BooleanOptionalAction,
        )
        parser.add_argument(
            "--use-ai",
            "--ai",
            help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π",
            default=False,
            action=argparse.BooleanOptionalAction,
        )
        parser.add_argument(
            "--pre-prompt",
            "--prompt",
            help="–î–æ–±–∞–≤–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞",
            default="–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–µ –±–æ–ª–µ–µ 5-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –º–æ–µ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏",
        )
        parser.add_argument(
            "--apply-interval",
            help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (X, X-Y)",
            default="1-5",
            type=parse_interval,
        )
        parser.add_argument(
            "--page-interval",
            help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (X, X-Y)",
            default="1-3",
            type=parse_interval,
        )
        parser.add_argument(
            "--order-by",
            help="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π",
            choices=[
                "publication_time",
                "salary_desc",
                "salary_asc",
                "relevance",
                "distance",
            ],
            default="relevance",
        )
        parser.add_argument(
            "--search",
            help="–°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–º–æ—Å–∫–≤–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä 100500'",
            type=str,
            default=None,
        )
        parser.add_argument(
            "--dry-run",
            help="–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–∫–ª–∏–∫–∏, –∞ —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞",
            default=False,
            action=argparse.BooleanOptionalAction,
        )

    def run(self, args: Namespace) -> None:
        self.enable_telemetry = True
        if args.disable_telemetry:
            # print(
            #     "üëÅÔ∏è –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è—Ö –∏ –∏—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä."
            # )
            # if (
            #     input("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é (–¥/–ù)? ")
            #     .lower()
            #     .startswith(("–¥", "y"))
            # ):
            #     self.enable_telemetry = False
            #     logger.info("–¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            # else:
            #     logger.info("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –≤–∫–ª—é—á–µ–Ω–Ω–æ–π!")
            self.enable_telemetry = False

        self.api = get_api(args)
        self.resume_id = args.resume_id or self._get_resume_id()
        self.application_messages = self._get_application_messages(
            args.message_list
        )
        self.chat = None

        if config := args.config.get("blackbox"):
            self.chat = BlackboxChat(
                session_id=config["session_id"],
                chat_payload=config["chat_payload"],
                proxies=self.api.proxies or {},
            )

        self.pre_prompt = args.pre_prompt

        self.apply_min_interval, self.apply_max_interval = args.apply_interval
        self.page_min_interval, self.page_max_interval = args.page_interval

        self.force_message = args.force_message
        self.order_by = args.order_by
        self.search = args.search
        self.dry_run = args.dry_run
        self._apply_similar()

    def _get_application_messages(
        self, message_list: TextIO | None
    ) -> list[str]:
        if message_list:
            application_messages = list(
                filter(None, map(str.strip, message_list))
            )
        else:
            application_messages = [
                "{–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞|–ú–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å} –≤–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è %(vacancy_name)s",
                "{–ü—Ä–æ—à—É —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å|–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å} {–º–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É|–º–æ–µ —Ä–µ–∑—é–º–µ} –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é %(vacancy_name)s",
            ]
        return application_messages

    def _apply_similar(self) -> None:
        telemetry_client = TelemetryClient(proxies=self.api.proxies)
        telemetry_data = defaultdict(dict)

        vacancies = self._get_vacancies()

        if self.enable_telemetry:
            for vacancy in vacancies:
                vacancy_id = vacancy["id"]
                telemetry_data["vacancies"][vacancy_id] = {
                    "name": vacancy.get("name"),
                    "type": vacancy.get("type", {}).get("id"),  # open/closed
                    "area": vacancy.get("area", {}).get("name"),  # –≥–æ—Ä–æ–¥
                    "salary": vacancy.get(
                        "salary"
                    ),  # from, to, currency, gross
                    "direct_url": vacancy.get(
                        "alternate_url"
                    ),  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
                    "created_at": fix_datetime(
                        vacancy.get("created_at")
                    ),  # –±—É–¥–µ–º –≤—ã—á–∏—Å–ª—è—Ç—å –≥–æ–≤–Ω–æ-–≤–∞–∫–∞–Ω—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ –ø–æ–ª–≥–æ–¥–∞ –≤–∏—Å—è—Ç
                    "published_at": fix_datetime(vacancy.get("published_at")),
                    "contacts": vacancy.get(
                        "contacts"
                    ),  # –ø–∏–∑–¥–æ—Ä–≤–∞–Ω–∫–∏ —Ç–∞–º —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç
                    # HH —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø–µ—Ä—Ñ–∏–∫—Ü–∏–æ–Ω–∏—Å—Ç–∞ ‚Äî –∫—É—Å–æ–∫ –≥–æ–≤–Ω–∞, –≥–¥–µ –∫—Ä–∏–≤—ã–µ
                    # —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã, —É –≤–∞–∫–∞–Ω—Å–∏–π –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è...
                    "employer_id": int(vacancy["employer"]["id"])
                    if "employer" in vacancy and "id" in vacancy["employer"]
                    else None,
                    # "relations": vacancy.get("relations", []),
                    # –û—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
                }

        me = self.api.get("/me")

        basic_message_placeholders = {
            "first_name": me.get("first_name", ""),
            "last_name": me.get("last_name", ""),
            "email": me.get("email", ""),
            "phone": me.get("phone", ""),
        }

        do_apply = True
        complained_employers = set()

        for vacancy in vacancies:
            try:
                message_placeholders = {
                    "vacancy_name": vacancy.get("name", ""),
                    "employer_name": vacancy.get("employer", {}).get(
                        "name", ""
                    ),
                    **basic_message_placeholders,
                }

                logger.debug(
                    "–í–∞–∫–∞–Ω—Å–∏—è %(vacancy_name)s –æ—Ç %(employer_name)s"
                    % message_placeholders
                )

                if vacancy.get("has_test"):
                    logger.debug(
                        "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é —Å —Ç–µ—Å—Ç–æ–º: %s",
                        vacancy["alternate_url"],
                    )
                    continue

                if vacancy.get("archived"):
                    logger.warning(
                        "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –≤ –∞—Ä—Ö–∏–≤–µ: %s",
                        vacancy["alternate_url"],
                    )
                    continue
                
                skip_vacancy = False
                vacancy_name = vacancy.get("name", "")
                for stop_word in STOP_WORDS:
                    if stop_word.lower() in vacancy_name.lower():
                        logger.error(
                            "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é —Å '%s' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: %s %s",
                            stop_word,
                            truncate_string(vacancy["name"]),
                            vacancy["alternate_url"],
                        )
                        skip_vacancy = True
                        break
                
                if skip_vacancy:
                    continue

                relations = vacancy.get("relations", [])
                employer_id = vacancy.get("employer", {}).get("id")

                if (
                    self.enable_telemetry
                    and employer_id
                    and employer_id not in telemetry_data["employers"]
                    and employer_id not in complained_employers
                    and (
                        not relations
                        or parse_invalid_datetime(vacancy["created_at"])
                        + timedelta(days=7)
                        > datetime.now(tz=timezone.utc)
                    )
                ):
                    employer = self.api.get(f"/employers/{employer_id}")

                    employer_data = {
                        "name": employer.get("name"),
                        "type": employer.get("type"),
                        "description": employer.get("description"),
                        "site_url": employer.get("site_url"),
                        "area": employer.get("area", {}).get("name"),  # –≥–æ—Ä–æ–¥
                    }
                    if "got_rejection" in relations:
                        try:
                            print(
                                "üö® –í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–∫–∞–∑ –æ—Ç https://hh.ru/employer/%s"
                                % employer_id
                            )
                            response = telemetry_client.send_telemetry(
                                f"/employers/{employer_id}/complaint",
                                employer_data,
                            )
                            if "topic_url" in response:
                                print(
                                    "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:",
                                    response["topic_url"],
                                )
                            else:
                                print(
                                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å..."
                                )
                            complained_employers.add(employer_id)
                        except TelemetryError as ex:
                            logger.error(ex)
                    elif do_apply:
                        telemetry_data["employers"][employer_id] = employer_data

                if not do_apply:
                    logger.info(
                        "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é —Ç–∞–∫ –∫–∞–∫ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∑–∞—è–≤–æ–∫: %s",
                        vacancy["alternate_url"],
                    )
                    print(f"\n–ü—Ä–æ–ø—É—Å–∫ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ –æ—Ç–∫–ª–∏–∫–æ–≤: {vacancy_name}")
                    continue

                if relations:

                    continue

                params = {
                    "resume_id": self.resume_id,
                    "vacancy_id": vacancy["id"],
                    "message": "",
                }

                if self.force_message or vacancy.get(
                    "response_letter_required"
                ):
                    if self.chat:
                        try:
                            msg = self.pre_prompt + "\n\n"
                            msg += message_placeholders["vacancy_name"]
                            logger.debug(msg)
                            msg = self.chat.send_message(msg)
                        except BlackboxError as ex:
                            logger.error(ex)
                            continue
                    else:
                        msg = (
                            random_text(
                                random.choice(self.application_messages)
                            )
                            % message_placeholders
                        )

                    logger.debug(msg)
                    params["message"] = msg

                if self.dry_run:
                    logger.info(
                        "Dry Run: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é %s —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: %s",
                        vacancy["alternate_url"],
                        params,
                    )
                    continue

                delay = random.uniform(5, 10)
                time.sleep(delay)
                res = self.api.post("/negotiations", params)
                assert res == {}
                print(
                    "\nüì® –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–∫–ª–∏–∫",
                    vacancy["alternate_url"],
                    "(",
                    truncate_string(vacancy["name"]),
                    ")",
                )
            except ApiError as ex:
                logger.error(ex)
                if isinstance(ex, BadRequest) and ex.limit_exceeded:
                    do_apply = False

        print("üìù –û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã!")

        if self.enable_telemetry:
            if self.dry_run:
                # –° --dry-run –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
                logger.info(
                    "Dry Run: –î–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: %r",
                    telemetry_data,
                )
                return

            try:
                response = telemetry_client.send_telemetry(
                    "/collect", dict(telemetry_data)
                )
                logger.debug(response)
            except TelemetryError as ex:
                logger.error(ex)

    def _get_vacancies(self, per_page: int = 100) -> list[VacancyItem]:
        rv = []
        for page in range(20):
            params = {
                "page": page,
                "per_page": per_page,
                "order_by": self.order_by,
            }
            if self.search:
                params["text"] = self.search
            res: ApiListResponse = self.api.get(
                f"/resumes/{self.resume_id}/similar_vacancies", params
            )
            rv.extend(res["items"])
            if page >= res["pages"] - 1:
                break

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if page > 0:
                interval = random.uniform(
                    self.page_min_interval, self.page_max_interval
                )
                time.sleep(interval)

        return rv
